/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* &lt { */
/*     tapping-term-ms = <175>; */
/* }; */

/ { 

    behaviors {
        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lp: hold_tap_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        rp: hold_tap_right_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        thm: thumb_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_ROW";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        ly: custom_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        td1: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&sl 1>, <&tog 1>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &ht LGUI Q   &kp W  &kp E  &kp R      &kp T                 &kp Y            &kp U  &kp I      &kp O    &ht LGUI P
                &lp LCTRL A  &kp S  &kp D  &kp F      &kp G                 &kp H            &kp J  &kp K      &kp L    &ht LCTRL SEMI
                &ht LSFT Z   &kp X  &kp C  &kp V      &kp B                 &kp N            &kp M  &kp COMMA  &kp DOT  &rp LSFT FSLH
                                           &ly 2 TAB  &thm LALT BSPC        &thm LALT SPACE  &td1
                >;
        };

        // Numbers and punctuations each on separate row
        num_punc_layer {
            bindings = <
                &kp EXCL      &kp AT  &kp HASH  &kp DLLR     &kp PRCNT        &kp CARET        &kp AMPS     &kp STAR  &kp LPAR  &kp RPAR
                &lp LCTRL N1  &kp N2  &kp N3    &ht LGUI N4  &kp N5           &kp N6           &ht LGUI N7  &kp N8    &kp N9    &ht LCTRL N0
                &kp LSFT      &none   &none     &none        &none            &none            &none        &trans    &trans    &trans
                                                &mo 4        &trans           &thm LALT SPACE  &trans
                >;
        };

        nav_sys_layer {
            bindings = <
                &ht LGUI F9   &kp F10  &kp F11  &kp F12  &kp PSCRN        &kp HOME    &kp PG_DN     &kp PG_UP     &kp END       &kp LGUI
                &lp LCTRL F5  &kp F6   &kp F7   &kp F8   &none            &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT     &kp LCTRL
                &ht LSFT F1   &kp F2   &kp F3   &kp F4   &tog 3           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none         &kp LSFT
                                                &tog 2   &trans           &trans      &trans
                >;
        };

        nav_numpad_layer {
            bindings = <
                &none    &kp HOME  &kp UP    &kp PG_UP  &none            &kp FSLH  &kp N7  &kp N8  &kp N9  &kp MINUS
                &kp END  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN        &kp STAR  &kp N4  &kp N5  &kp N6  &kp PLUS
                &none    &none     &none     &none      &tog 3           &kp N0    &kp N1  &kp N2  &kp N3  &kp DOT
                                             &mo 4      &trans           &kp BSPC  &none
                >;
        };

        adj_layer {
            bindings = <
                &none         &none         &none         &none         &bt BT_CLR          &none   &none   &none  &none  &none
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &none   &none   &none  &none  &none
                &none         &none         &none         &none         &none               &none   &none   &none  &none  &none
                                                          &mo 4         &bootloader         &none   &bootloader
                >;
        };

    };

    combos {
        compatible = "zmk,combos";

        // Punctuation
        combo_equal {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0 1>;
            bindings = <&kp EQUAL>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <1 12>;
            layers = <0 1>;
            bindings = <&kp PLUS>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0 1>;
            bindings = <&kp MINUS>;
        };

        combo_under_score {
            timeout-ms = <50>;
            key-positions = <8 17>;
            layers = <0 1>;
            bindings = <&kp UNDER>;
        };

        combo_left_bracket {
            timeout-ms = <50>;
            key-positions = <2 13>;
            layers = <0>;
            bindings = <&kp LBKT>;
        };

        combo_left_brace {
            timeout-ms = <50>;
            key-positions = <3 14>;
            layers = <0>;
            bindings = <&kp LBRC>;
        };

        combo_right_brace {
            timeout-ms = <50>;
            key-positions = <6 15>;
            layers = <0>;
            bindings = <&kp RBRC>;
        };

        combo_right_bracket {
            timeout-ms = <50>;
            key-positions = <7 16>;
            layers = <0>;
            bindings = <&kp RBKT>;
        };

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_tilde_alt {
            timeout-ms = <50>;
            key-positions = <21 23>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <21 22>;
            layers = <0>;
            bindings = <&kp GRAVE>;
        };

        combo_back_slash {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp BSLH>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <28 29>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_pipe_alt {
            timeout-ms = <50>;
            key-positions = <26 28>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_single_quote {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0>;
            bindings = <&kp SQT>;
        };

        combo_double_quote {
            timeout-ms = <50>;
            key-positions = <18 19>;
            layers = <0>;
            bindings = <&kp DQT>;
        };


        // Control
        combo_enter {
            timeout-ms = <50>;
            key-positions = <17 18>;
            layers = <0 1 3>;
            bindings = <&kp ENTER>;
        };

        combo_caps {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&kp CAPS>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0 1 2 3>;
            bindings = <&kp ESC>;
        };

        combo_esc_clear {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <3>;
            bindings = <&kp ESC>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <30 31>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };

        combo_L2 {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            layers = <0 2>;
            bindings = <&tog 2>;
        };

        combo_L3 {
            timeout-ms = <50>;
            /* key-positions = <11 12 13>; */
            key-positions = <25 26 27>;
            layers = <0 3>;
            bindings = <&tog 3>;
        };

        combo_bootloader_left {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <4>;
            bindings = <&bootloader>;
        };

        combo_bootloader_right {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <4>;
            bindings = <&bootloader>;
        };

    };

};
